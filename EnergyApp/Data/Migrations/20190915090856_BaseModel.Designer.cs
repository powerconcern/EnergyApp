// <auto-generated />
using System;
using EnergyApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EnergyApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190915090856_BaseModel")]
    partial class BaseModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("EnergyApp.Data.Adjustment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CMPAssignmentChargerID");

                    b.Property<int?>("CMPAssignmentMeterID");

                    b.Property<int?>("CMPAssignmentPartnerID");

                    b.Property<int>("Current");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("iPhase");

                    b.HasKey("ID");

                    b.HasIndex("CMPAssignmentChargerID", "CMPAssignmentPartnerID", "CMPAssignmentMeterID");

                    b.ToTable("Adjustment");
                });

            modelBuilder.Entity("EnergyApp.Data.CMPAssignment", b =>
                {
                    b.Property<int>("ChargerID");

                    b.Property<int>("PartnerID");

                    b.Property<int>("MeterID");

                    b.HasKey("ChargerID", "PartnerID", "MeterID");

                    b.HasIndex("MeterID");

                    b.HasIndex("PartnerID");

                    b.ToTable("CMPAssignments");
                });

            modelBuilder.Entity("EnergyApp.Data.ChargeSession", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChargerID");

                    b.Property<DateTime>("End");

                    b.Property<int>("Kwh");

                    b.Property<int>("OutletID");

                    b.Property<DateTime>("Start");

                    b.HasKey("ID");

                    b.HasIndex("ChargerID");

                    b.ToTable("ChargeSession");
                });

            modelBuilder.Entity("EnergyApp.Data.Charger", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("MaxCurrent");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Chargers");
                });

            modelBuilder.Entity("EnergyApp.Data.Configuration", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("EnergyApp.Data.Meter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("MaxCurrent");

                    b.Property<string>("Name");

                    b.Property<int?>("Type");

                    b.HasKey("ID");

                    b.ToTable("Meters");
                });

            modelBuilder.Entity("EnergyApp.Data.Outlet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChargerID");

                    b.Property<float>("MaxCurrent");

                    b.Property<string>("Name");

                    b.Property<int?>("Type");

                    b.HasKey("ID");

                    b.HasIndex("ChargerID");

                    b.ToTable("Outlets");
                });

            modelBuilder.Entity("EnergyApp.Data.Partner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("Type");

                    b.Property<string>("UserReference");

                    b.HasKey("ID");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EnergyApp.Data.Adjustment", b =>
                {
                    b.HasOne("EnergyApp.Data.CMPAssignment")
                        .WithMany("Adjustments")
                        .HasForeignKey("CMPAssignmentChargerID", "CMPAssignmentPartnerID", "CMPAssignmentMeterID");
                });

            modelBuilder.Entity("EnergyApp.Data.CMPAssignment", b =>
                {
                    b.HasOne("EnergyApp.Data.Charger", "Charger")
                        .WithMany("CMPAssignments")
                        .HasForeignKey("ChargerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EnergyApp.Data.Meter", "Meter")
                        .WithMany("CMPAssignments")
                        .HasForeignKey("MeterID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EnergyApp.Data.Partner", "Partner")
                        .WithMany("CMPAssignments")
                        .HasForeignKey("PartnerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EnergyApp.Data.ChargeSession", b =>
                {
                    b.HasOne("EnergyApp.Data.Charger", "Charger")
                        .WithMany("ChargeSessions")
                        .HasForeignKey("ChargerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EnergyApp.Data.Outlet", b =>
                {
                    b.HasOne("EnergyApp.Data.Charger", "Charger")
                        .WithMany("Outlets")
                        .HasForeignKey("ChargerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
